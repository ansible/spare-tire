{% set sshident %}-i {{ ansible_ssh_private_key_file }} root@{{ ansible_host }}{% endset %}

{% macro do_ssh() %}
ssh {{ sshident }} bash <<'EOF'
{{ caller() }}
EOF
{% endmacro %}

set -eu

mkdir -p dist

{% call do_ssh() %}
    echo "##[group]install build deps"
    mkdir -p dist
    pkg install -y lang/rust libyaml
    echo "##[endgroup]"
{% endcall %}

{% for item in job_data.packages %}
{% call do_ssh() %}
    set -eux
    {{ item.python }} -m pip install build

    mkdir -p build_tmp
    pushd build_tmp

    echo "##[group]download sdist for {{ item.name }}=={{ item.version }}"
    curl {{ item.sdist_url }} -o sdist.tgz
    echo "##[endgroup]"

    echo "##[group]extract sdist"
    tar zxf sdist.tgz
    cd {{ item.sdist_dir }}
    echo "##[endgroup]"

    echo "##[group]build wheel for {{ item.name }} version {{ item.version }} python {{ item.python }} abi {{ item.abi | default('') }}"
    set -x

    export PIP_CONSTRAINT="$PWD/constraints.txt"
    cat << CONSTRAINT_EOF > "${PIP_CONSTRAINT}"
{{ item.constraints }}
CONSTRAINT_EOF

    # This is required for PyYAML builds to find libyaml headers.
    export CFLAGS='-I/usr/local/include/'

    # FIXME do abi options better
    if [[ "{{ item.abi | default('') }}" == "abi3" ]]; then
      ABI_ARGS='-C=--global-option=--py-limited-api -C=--global-option={{ item.python_tag }}'
    else
      ABI_ARGS=''
    fi

    {{ item.python }} -m build -w -o ../../dist $ABI_ARGS .

    ls -l "../../dist/{{ item.expected_output_filename }}"

    set +x

    popd
    rm -rf build_tmp
    echo "##[endgroup]"
{% endcall %}
{% endfor %}

echo "##[group]copy remote artifacts to $(pwd)/dist"
set -eux
scp -r {{ sshident }}:/root/dist/* ./dist/
echo "##[endgroup]"
